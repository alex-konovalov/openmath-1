<!-- $Id$ -->

<Chapter Label="OpenMathFunctionality">
<Heading>&OpenMath; functionality in &GAP;</Heading>    

<Section Label="OpenMath">
<Heading>Loading the package</Heading>

The package is loaded as shown below

<Example>
<![CDATA[
gap> LoadPackage("openmath");
-----------------------------------------------------------------------------
Loading  openmath 09.03.31 (OpenMath functionality in GAP)
by Marco Costantini (http://www-math.science.unitn.it/~costanti/),
   Alexander Konovalov (http://www.cs.st-andrews.ac.uk/~alexk/), and
   Andrew Solomon (http://www.illywhacker.net/).
-----------------------------------------------------------------------------
#I  Warning: package openmath, the program `gpipe' is not compiled.
true
]]>
</Example>

During this step, the &GAP; system may load required and suggested packages as well.

</Section>

<Section Label="ViewOpenMath">
<Heading>Viewing OpenMath representation of an object</Heading>

<ManSection>
    <Func Name="OMPrint" 
           Arg="obj" />
 <Description>
OMPrint writes the default XML OpenMath encoding of GAP object <A>obj</A> to the standard output.
<Example>
<![CDATA[
gap> g := Group((1,2,3));;
gap> OMPrint(g);
<OMOBJ>
	<OMA>
		<OMS cd="group1" name="Group"/>
		<OMA>
			<OMS cd="permut1" name="Permutation"/>
			<OMI> 2</OMI>
			<OMI> 3</OMI>
			<OMI> 1</OMI>
		</OMA>
	</OMA>
</OMOBJ>
]]>
</Example>
</Description>
</ManSection>

<ManSection>
    <Func Name="OMString" 
           Arg="obj" />
 <Description>
OMString returns a string with the default XML OpenMath encoding of GAP object <A>obj</A>.
If used with the <K>noomobj</K> option, initial and final OMOBJ tags will be omitted.
<Example>
<![CDATA[
gap> OMString(42);
"<OMOBJ> <OMI> 42</OMI> </OMOBJ>"
gap> OMString((1,2):noomobj);
"<OMA> <OMS cd=\"permut1\" name=\"permutation\"/> <OMI> 2</OMI> <OMI> 1</OMI> </OMA>"
]]>
</Example>
</Description>
</ManSection>

</Section>

<Section Label="ExchangeOpenMath">
<Heading>Writing and reading OpenMath code to/from streams</Heading>

<ManSection>
    <Func Name="OMGetObject" 
           Arg="stream" />
 <Description>
<A>stream</A> is an input stream (see 
<Ref BookName="ref" Oper="InputTextFile" />, 
<Ref BookName="ref" Oper="InputTextUser" />, 
<Ref BookName="ref" Oper="InputTextString" />, 
<Ref BookName="ref" Oper="InputOutputLocalProcess" />, 
<Ref BookName="scscp" Oper="InputOutputTCPStream" Label="for client" /> )
with an OpenMath object on it.
OMGetObject takes precisely one object off <A>stream</A> 
and returns it as a GAP object.
Both XML and binary OpenMath encoding are supported: autodetection
is used.
This function requires either that the &GAP; package &GAPDoc; is
available (for XML OpenMath), or that the external program `gpipe',
included in this package, has been compiled (for both XML and binary
OpenMath).

This may be used to retrieve objects from a file,
for example:

<Example>
<![CDATA[
gap> test3:=Filename(DirectoriesPackageLibrary("openmath","tst"),"test3.omt");;
gap> stream := InputTextFile( test3 );;
gap> OMGetObject(stream);
912873912381273891
gap> OMGetObject(stream);
E(4)
gap> CloseStream(stream);
]]>
</Example>

or it can be used to retrieve them from standard input -
one may paste an OpenMath object directly into standard input
after issuing GAP with the following commands:

<Example>
<![CDATA[
gap> stream := InputTextUser();;
gap> g := OMGetObject(stream);CloseStream(stream);
]]>
</Example>

</Description>
</ManSection>


<ManSection>
    <Func Name="OMPutObject" 
           Arg="stream obj" />
 <Description>
OMPutObject writes (appends) the XML OpenMath encoding of the GAP
object <A>obj</A> to output stream <A>stream</A> 
(see <Ref BookName="ref" Oper="InputTextFile" />, 
<Ref BookName="ref" Oper="OutputTextUser" />, 
<Ref BookName="ref" Oper="OutputTextString" />, 
<Ref BookName="ref" Oper="InputOutputLocalProcess" />, 
<Ref BookName="scscp" Oper="InputOutputTCPStream" Label="for server" /> ).

<Example>
<![CDATA[
gap> g := [[1,2],[1,0]];;
gap> t := "";
""
gap> s := OutputTextString(t, true);;
gap> OMPutObject(s, g);
gap> CloseStream(s);
gap> Print(t);
<OMOBJ>
	<OMA>
		<OMS cd="linalg2" name="matrix"/>
		<OMA>
			<OMS cd="linalg2" name="matrixrow"/>
			<OMI> 1</OMI>
			<OMI> 2</OMI>
		</OMA>
		<OMA>
			<OMS cd="linalg2" name="matrixrow"/>
			<OMI> 1</OMI>
			<OMI> 0</OMI>
		</OMA>
	</OMA>
</OMOBJ>
]]>
</Example>

</Description>
</ManSection>

</Section>


<Section Label="Utilities">
<Heading>Utilities</Heading>

<ManSection>
    <Func Name="OMTest" 
           Arg="obj" />
<Description>
Converts <A>obj</A> to OpenMath and back. Returns true iff <A>obj</A> is unchanged
(as a GAP object) by this operation. The OpenMath standard does not 
stipulate that converting to and from OpenMath should be the identity
function so this is a useful diagnostic tool. 
</Description>
</ManSection>
</Section>

</Chapter>